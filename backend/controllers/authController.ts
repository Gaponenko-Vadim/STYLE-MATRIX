// controllers/authController.ts
import { Request, Response, NextFunction } from "express";
import { asyncHandler } from "../middleware";
import { ValidationError, UnauthorizedError } from "../errors";
import User from "../models/User";
import { generateTokens, verifyRefreshToken } from "../utils/jwt";

/**
 * üìß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email
 */
export const registerWithEmail = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { email, password, name } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email || !password || !name) {
      throw new ValidationError("Email, –ø–∞—Ä–æ–ª—å –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    if (password.length < 6) {
      throw new ValidationError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      throw new ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.create({
      email,
      password_hash: password,
      name,
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const tokens = generateTokens({
      userId: user.id,
      email: user.email,
      role: user.role,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token –≤ –±–∞–∑–µ
    await user.setRefreshToken(tokens.refreshToken);

    res.status(201).json({
      success: true,
      message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
      data: {
        user: user.toSafeJSON(),
        token: tokens.accessToken,
        refresh_token: tokens.refreshToken,
      },
    });
  }
);

/**
 * üìß –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ email
 */
export const loginWithEmail = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { email, password } = req.body;

    if (!email || !password) {
      throw new ValidationError("Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ where: { email } });
    if (!user) {
      throw new UnauthorizedError("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.status !== "active") {
      throw new UnauthorizedError("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await user.checkPassword(password);
    if (!isPasswordValid) {
      throw new UnauthorizedError("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const tokens = generateTokens({
      userId: user.id,
      email: user.email,
      role: user.role,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token –≤ –±–∞–∑–µ
    await user.setRefreshToken(tokens.refreshToken);

    res.status(200).json({
      success: true,
      message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
      data: {
        user: user.toSafeJSON(),
        token: tokens.accessToken,
        refresh_token: tokens.refreshToken,
      },
    });
  }
);

/**
 * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
 */
export const refreshToken = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { refresh_token } = req.body;

    if (!refresh_token) {
      throw new ValidationError("Refresh token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh token
      const payload = verifyRefreshToken(refresh_token);

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({
        where: {
          id: payload.userId,
          refresh_token: refresh_token,
        },
      });

      if (!user) {
        throw new UnauthorizedError("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh token");
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
      const tokens = generateTokens({
        userId: user.id,
        email: user.email,
        role: user.role,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º refresh token –≤ –±–∞–∑–µ
      await user.setRefreshToken(tokens.refreshToken);

      res.status(200).json({
        success: true,
        message: "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        data: {
          token: tokens.accessToken,
          refresh_token: tokens.refreshToken,
        },
      });
    } catch (error) {
      throw new UnauthorizedError("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh token");
    }
  }
);

/**
 * üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 */
export const logout = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { refresh_token } = req.body;

    if (refresh_token) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ refresh token –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ
      const user = await User.findOne({ where: { refresh_token } });
      if (user) {
        await user.setRefreshToken(null);
      }
    }

    res.status(200).json({
      success: true,
      message: "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
    });
  }
);

/**
 * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç)
 */
export const getProfile = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    // req.user —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ middleware authenticateToken
    if (!req.user) {
      throw new UnauthorizedError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const user = await User.findByPk(req.user.userId);

    if (!user) {
      throw new UnauthorizedError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    res.status(200).json({
      success: true,
      data: {
        user: user.toSafeJSON(),
      },
    });
  }
);

/**
 * üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
 */
export const protectedRoute = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    if (!req.user) {
      throw new UnauthorizedError("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–≠—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç!",
      user: req.user,
    });
  }
);

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞–º–∏
export const authWithVK = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { access_token } = req.body;

    if (!access_token) {
      throw new ValidationError("Access token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "VK OAuth - TODO: implement",
      data: {
        user: {
          id: 1,
          email: "vk_user@example.com",
          name: "VK User",
          role: "user",
        },
        token: "jwt_token_placeholder",
        provider: "vk",
      },
    });
  }
);

export const authWithGoogle = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id_token } = req.body;

    if (!id_token) {
      throw new ValidationError("ID token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "Google OAuth - TODO: implement",
      data: {
        user: {
          id: 1,
          email: "google_user@example.com",
          name: "Google User",
          role: "user",
        },
        token: "jwt_token_placeholder",
        provider: "google",
      },
    });
  }
);

export const authWithMail = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { access_token } = req.body;

    if (!access_token) {
      throw new ValidationError("Access token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "Mail.ru OAuth - TODO: implement",
      data: {
        user: {
          id: 1,
          email: "mail_user@example.com",
          name: "Mail User",
          role: "user",
        },
        token: "jwt_token_placeholder",
        provider: "mail",
      },
    });
  }
);

export const sendVerificationCode = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { phone } = req.body;

    if (!phone) {
      throw new ValidationError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
      data: {
        code: process.env.NODE_ENV === "development" ? "123456" : undefined,
      },
    });
  }
);

export const authWithPhone = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { phone, code } = req.body;

    if (!phone || !code) {
      throw new ValidationError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    res.status(200).json({
      success: true,
      message: "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
      data: {
        user: {
          id: 1,
          phone,
          name: "Phone User",
          role: "user",
        },
        token: "jwt_token_placeholder",
        provider: "phone",
      },
    });
  }
);
