// controllers/chatController.ts
import { Request, Response, NextFunction } from "express";
import { asyncHandler } from "../middleware";
import { ValidationError } from "../errors";

/**
 * üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - –ó–ê–ì–õ–£–®–ö–ê
 */
export const sendMessage = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { user_id, recipient_id, message } = req.body;

    if (!user_id || !recipient_id || !message) {
      throw new ValidationError("user_id, recipient_id –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    res.status(201).json({
      success: true,
      message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      data: {
        chatMessage: {
          id: 1,
          user_id,
          recipient_id,
          message,
          created_at: new Date().toISOString(),
        },
      },
    });
  }
);

/**
 * üí¨ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –ó–ê–ì–õ–£–®–ö–ê
 */
export const getConversation = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { user1Id, user2Id } = req.params;

    if (!user1Id || !user2Id) {
      throw new ValidationError("user1Id –∏ user2Id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    res.status(200).json({
      success: true,
      message: "–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞",
      data: {
        user1Id: parseInt(user1Id),
        user2Id: parseInt(user2Id),
        messages: [
          {
            id: 1,
            user_id: parseInt(user1Id),
            recipient_id: parseInt(user2Id),
            message: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            created_at: "2024-01-15T10:00:00.000Z",
          },
          {
            id: 2,
            user_id: parseInt(user2Id),
            recipient_id: parseInt(user1Id),
            message: "–ü—Ä–∏–≤–µ—Ç! –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!",
            created_at: "2024-01-15T10:05:00.000Z",
          },
        ],
      },
    });
  }
);

/**
 * üì± –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ó–ê–ì–õ–£–®–ö–ê
 */
export const getUserChats = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { userId } = req.params;

    if (!userId) {
      throw new ValidationError("userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–ß–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã",
      data: {
        userId: parseInt(userId),
        chats: [
          {
            id: 1,
            participant_id: 2,
            participant_name: "–ê–Ω–Ω–∞",
            last_message: "–°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π –Ω–∞—Ä—è–¥!",
            last_message_time: "2024-01-15T11:00:00.000Z",
            unread_count: 2,
          },
          {
            id: 2,
            participant_id: 3,
            participant_name: "–ú–∏—Ö–∞–∏–ª",
            last_message: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–∏–º–µ—Ä–∫–∞?",
            last_message_time: "2024-01-15T10:30:00.000Z",
            unread_count: 0,
          },
        ],
      },
    });
  }
);

/**
 * üéØ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–º–µ—Ä–∫–æ–π –≤ —á–∞—Ç–µ - –ó–ê–ì–õ–£–®–ö–ê
 */
export const shareTryOn = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { tryon_id, chat_id, message } = req.body;

    if (!tryon_id || !chat_id) {
      throw new ValidationError("tryon_id –∏ chat_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    res.status(201).json({
      success: true,
      message: "–ü—Ä–∏–º–µ—Ä–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ",
      data: {
        share: {
          id: 1,
          tryon_id,
          chat_id,
          message: message || "–°–º–æ—Ç—Ä–∏ –∫–∞–∫ —Å–∏–¥–∏—Ç!",
          screenshot_url: "https://example.com/screenshots/tryon_1.jpg",
          created_at: new Date().toISOString(),
        },
      },
    });
  }
);
