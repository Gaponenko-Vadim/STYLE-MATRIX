// controllers/clothingController.ts
import { Request, Response, NextFunction } from "express";
import { asyncHandler } from "../middleware";
import { ValidationError } from "../errors";
import sequelize from "../config/db";
import { QueryTypes } from "sequelize";
import Clothing from "../models/Clothing"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å

/**
 * üëï –°–æ–∑–¥–∞—Ç—å –æ–¥–µ–∂–¥—É - –ó–ê–ì–õ–£–®–ö–ê
 */
// controllers/clothingController.ts

/**
 * üëï –°–æ–∑–¥–∞—Ç—å –æ–¥–µ–∂–¥—É - –ü–†–û–°–¢–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –° SEQUELIZE
 */
// controllers/clothingController.ts

/**
 * üëï –°–æ–∑–¥–∞—Ç—å –æ–¥–µ–∂–¥—É - –ò–°–ü–û–õ–¨–ó–£–ï–ú SEQUELIZE MODEL
 */
export const createClothing = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      console.log("üü° [1] –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä createClothing –≤—ã–∑–≤–∞–Ω");
      console.log("üü° [2] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", JSON.stringify(req.body, null, 2));

      const { user_id, type_id, brand_id, material, photo_2d_url } = req.body;

      console.log("üü° [3] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:", {
        user_id: user_id || 1,
        type_id: type_id || 1,
        brand_id: brand_id || 1,
        material: material || "—Ö–ª–æ–ø–æ–∫",
        photo_2d_url:
          photo_2d_url || "https://example.com/placeholder-clothing.jpg",
      });

      console.log("üü° [4] –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å Clothing...");

      // –°–æ–∑–¥–∞–µ–º –æ–¥–µ–∂–¥—É
      const newClothing = await Clothing.create({
        user_id: user_id || 1,
        type_id: type_id || 1,
        brand_id: brand_id || 1,
        material: material || "—Ö–ª–æ–ø–æ–∫",
        photo_2d_url:
          photo_2d_url || "https://example.com/placeholder-clothing.jpg",
        status: "visible",
      });

      console.log("‚úÖ [5] –û–¥–µ–∂–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, ID:", newClothing.id);
      console.log(
        "‚úÖ [6] –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å:",
        JSON.stringify(newClothing.toJSON(), null, 2)
      );

      res.status(201).json({
        success: true,
        message: "–û–¥–µ–∂–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
        data: {
          clothing: newClothing,
        },
      });

      console.log("‚úÖ [7] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É");
    } catch (error: unknown) {
      console.error("üî¥ [ERROR] –û—à–∏–±–∫–∞ –≤ createClothing:");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error instanceof Error) {
        console.error("üî¥ –¢–∏–ø –æ—à–∏–±–∫–∏:", error.name);
        console.error("üî¥ –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
        console.error("üî¥ Stack trace:", error.stack);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Sequelize
        if ("errors" in error) {
          console.error("üî¥ –î–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", (error as any).errors);
        }
        if ("parent" in error) {
          console.error("üî¥ SQL –æ—à–∏–±–∫–∞:", (error as any).parent?.message);
        }
      } else {
        console.error("üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏:", error);
      }

      next(error);
    }
  }
);
/**
 * üëï –ü–æ–ª—É—á–∏—Ç—å –≤—Å—é –æ–¥–µ–∂–¥—É - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 */

/**
 * üëï –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–µ–∂–¥–µ - –ó–ê–ì–õ–£–®–ö–ê
 */
export const getClothing = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    if (!id) {
      throw new ValidationError("ID –æ–¥–µ–∂–¥—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–¥–µ–∂–¥–µ –ø–æ–ª—É—á–µ–Ω–∞",
      data: {
        clothing: {
          id: parseInt(id),
          type_id: 1,
          brand_id: 1,
          material: "—Ö–ª–æ–ø–æ–∫",
          photo_2d_url: "https://example.com/photo.jpg",
          status: "visible",
          created_at: "2024-01-15T10:00:00.000Z",
        },
      },
    });
  }
);

/**
 * ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –æ–¥–µ–∂–¥—É - –ó–ê–ì–õ–£–®–ö–ê
 */
export const updateClothing = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;
    const updates = req.body;

    if (!id) {
      throw new ValidationError("ID –æ–¥–µ–∂–¥—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–û–¥–µ–∂–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      data: {
        clothing: {
          id: parseInt(id),
          ...updates,
          updated_at: new Date().toISOString(),
        },
      },
    });
  }
);

/**
 * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–¥–µ–∂–¥—É (soft delete) - –ó–ê–ì–õ–£–®–ö–ê
 */
export const deleteClothing = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    if (!id) {
      throw new ValidationError("ID –æ–¥–µ–∂–¥—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–û–¥–µ–∂–¥–∞ —É–¥–∞–ª–µ–Ω–∞",
      data: {
        clothingId: parseInt(id),
        deleted_at: new Date().toISOString(),
      },
    });
  }
);

/**
 * ‚≠ê –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –æ–¥–µ–∂–¥—ã - –ó–ê–ì–õ–£–®–ö–ê
 */
export const getClothingRatings = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    if (!id) {
      throw new ValidationError("ID –æ–¥–µ–∂–¥—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–†–µ–π—Ç–∏–Ω–≥–∏ –æ–¥–µ–∂–¥—ã –ø–æ–ª—É—á–µ–Ω—ã",
      data: {
        clothingId: parseInt(id),
        averageRating: 4.5,
        ratings: [
          {
            id: 1,
            user_id: 1,
            rate: 5,
            comment: "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ!",
            created_at: "2024-01-15T10:00:00.000Z",
          },
          {
            id: 2,
            user_id: 2,
            rate: 4,
            comment: "–•–æ—Ä–æ—à–æ, –Ω–æ –º–∞–ª–æ–º–µ—Ä–∏—Ç",
            created_at: "2024-01-15T11:00:00.000Z",
          },
        ],
      },
    });
  }
);

/**
 * üéÆ –ü–æ–ª—É—á–∏—Ç—å 3D –º–æ–¥–µ–ª–∏ –æ–¥–µ–∂–¥—ã - –ó–ê–ì–õ–£–®–ö–ê
 */
export const getClothing3DModels = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    if (!id) {
      throw new ValidationError("ID –æ–¥–µ–∂–¥—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "3D –º–æ–¥–µ–ª–∏ –æ–¥–µ–∂–¥—ã –ø–æ–ª—É—á–µ–Ω—ã",
      data: {
        clothingId: parseInt(id),
        models: [
          {
            id: 1,
            size: "M",
            model_3d_url: "https://example.com/model_m.glb",
            preview_image_url: "https://example.com/preview_m.jpg",
            scale_factor: 1.0,
          },
          {
            id: 2,
            size: "L",
            model_3d_url: "https://example.com/model_l.glb",
            preview_image_url: "https://example.com/preview_l.jpg",
            scale_factor: 1.1,
          },
        ],
      },
    });
  }
);
