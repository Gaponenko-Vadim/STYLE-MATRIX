// controllers/usersController.ts
import { Request, Response, NextFunction } from "express";
import { asyncHandler } from "../middleware";
import { ValidationError } from "../errors";

/**
 * üë§ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ó–ê–ì–õ–£–®–ö–ê
 */
export const getUserProfile = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    if (!id) {
      throw new ValidationError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω",
      data: {
        user: {
          id: parseInt(id),
          name: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          email: "test@example.com",
          role: "user",
          status: "active",
          created_at: "2024-01-15T10:00:00.000Z",
        },
      },
    });
  }
);

/**
 * ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ó–ê–ì–õ–£–®–ö–ê
 */
export const updateUserProfile = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;
    const { name, email } = req.body;

    if (!id) {
      throw new ValidationError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    if (!name && !email) {
      throw new ValidationError(
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å name –∏–ª–∏ email –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
      );
    }

    res.status(200).json({
      success: true,
      message: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω",
      data: {
        user: {
          id: parseInt(id),
          name: name || "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          email: email || "test@example.com",
          updated_at: new Date().toISOString(),
        },
      },
    });
  }
);

/**
 * üëï –ü–æ–ª—É—á–∏—Ç—å –æ–¥–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ó–ê–ì–õ–£–®–ö–ê
 */
export const getUserClothes = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    if (!id) {
      throw new ValidationError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–û–¥–µ–∂–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞",
      data: {
        userId: parseInt(id),
        clothes: [
          {
            id: 1,
            name: "–§—É—Ç–±–æ–ª–∫–∞",
            type: "t-shirt",
            status: "visible",
            created_at: "2024-01-15T10:00:00.000Z",
          },
          {
            id: 2,
            name: "–î–∂–∏–Ω—Å—ã",
            type: "jeans",
            status: "visible",
            created_at: "2024-01-15T11:00:00.000Z",
          },
        ],
      },
    });
  }
);

/**
 * üé™ –ü–æ–ª—É—á–∏—Ç—å –≥–∞—Ä–¥–µ—Ä–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ó–ê–ì–õ–£–®–ö–ê
 */
export const getUserWardrobe = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    if (!id) {
      throw new ValidationError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–ì–∞—Ä–¥–µ—Ä–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω",
      data: {
        userId: parseInt(id),
        wardrobe: [
          {
            id: 1,
            clothing_id: 1,
            added_at: "2024-01-15T10:00:00.000Z",
            fit_rating: 5,
            clothing_item: {
              id: 1,
              name: "–§—É—Ç–±–æ–ª–∫–∞ –±–∞–∑–æ–≤–∞—è",
              type: "t-shirt",
              photo_2d_url: "https://example.com/tshirt.jpg",
            },
          },
          {
            id: 2,
            clothing_id: 2,
            added_at: "2024-01-15T11:00:00.000Z",
            fit_rating: 4,
            clothing_item: {
              id: 2,
              name: "–î–∂–∏–Ω—Å—ã —Å–∫–∏–Ω–Ω–∏",
              type: "jeans",
              photo_2d_url: "https://example.com/jeans.jpg",
            },
          },
        ],
      },
    });
  }
);

/**
 * ‚≠ê –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ó–ê–ì–õ–£–®–ö–ê
 */
export const getUserRatings = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    if (!id) {
      throw new ValidationError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–û—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã",
      data: {
        userId: parseInt(id),
        ratings: [
          {
            id: 1,
            clothing_id: 1,
            rate: 4.5,
            comment: "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ!",
            created_at: "2024-01-15T10:00:00.000Z",
            clothing_item: {
              id: 1,
              name: "–§—É—Ç–±–æ–ª–∫–∞ –±–∞–∑–æ–≤–∞—è",
              type: "t-shirt",
            },
          },
        ],
      },
    });
  }
);
