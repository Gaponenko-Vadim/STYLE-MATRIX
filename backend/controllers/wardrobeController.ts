// controllers/wardrobeController.ts
import { Request, Response, NextFunction } from "express";
import { asyncHandler } from "../middleware";
import { ValidationError } from "../errors";

/**
 * üëî –î–æ–±–∞–≤–∏—Ç—å –æ–¥–µ–∂–¥—É –≤ –≥–∞—Ä–¥–µ—Ä–æ–± - –ó–ê–ì–õ–£–®–ö–ê
 */
export const addToWardrobe = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { userId } = req.params;
    const { clothing_id } = req.body;

    if (!userId) {
      throw new ValidationError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    if (!clothing_id) {
      throw new ValidationError("clothing_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(201).json({
      success: true,
      message: "–û–¥–µ–∂–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–∞—Ä–¥–µ—Ä–æ–±",
      data: {
        wardrobeItem: {
          id: 1,
          user_id: parseInt(userId),
          clothing_id,
          added_at: new Date().toISOString(),
          fit_rating: null,
        },
      },
    });
  }
);

/**
 * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–¥–µ–∂–¥—É –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞ - –ó–ê–ì–õ–£–®–ö–ê
 */
export const removeFromWardrobe = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { userId, clothingId } = req.params;

    if (!userId || !clothingId) {
      throw new ValidationError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ clothingId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    res.status(200).json({
      success: true,
      message: "–û–¥–µ–∂–¥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞",
      data: {
        userId: parseInt(userId),
        clothingId: parseInt(clothingId),
        removed_at: new Date().toISOString(),
      },
    });
  }
);

/**
 * üìÇ –ü–æ–ª—É—á–∏—Ç—å –≥–∞—Ä–¥–µ—Ä–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ó–ê–ì–õ–£–®–ö–ê
 */
export const getUserWardrobe = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { userId } = req.params;

    if (!userId) {
      throw new ValidationError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    res.status(200).json({
      success: true,
      message: "–ì–∞—Ä–¥–µ—Ä–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω",
      data: {
        userId: parseInt(userId),
        wardrobe: [
          {
            id: 1,
            clothing_id: 1,
            added_at: "2024-01-15T10:00:00.000Z",
            fit_rating: 5,
            clothing_item: {
              id: 1,
              name: "–§—É—Ç–±–æ–ª–∫–∞ –±–∞–∑–æ–≤–∞—è",
              type: "t-shirt",
              brand: "Nike",
              photo_2d_url: "https://example.com/tshirt.jpg",
            },
          },
          {
            id: 2,
            clothing_id: 2,
            added_at: "2024-01-15T11:00:00.000Z",
            fit_rating: 4,
            clothing_item: {
              id: 2,
              name: "–î–∂–∏–Ω—Å—ã —Å–∫–∏–Ω–Ω–∏",
              type: "jeans",
              brand: "Levi's",
              photo_2d_url: "https://example.com/jeans.jpg",
            },
          },
        ],
      },
    });
  }
);

/**
 * ‚≠ê –û–±–Ω–æ–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ—Å–∞–¥–∫–∏ - –ó–ê–ì–õ–£–®–ö–ê
 */
export const updateFitRating = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { userId, clothingId } = req.params;
    const { rating } = req.body;

    if (!userId || !clothingId) {
      throw new ValidationError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ clothingId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    if (!rating || rating < 1 || rating > 5) {
      throw new ValidationError("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5");
    }

    res.status(200).json({
      success: true,
      message: "–û—Ü–µ–Ω–∫–∞ –ø–æ—Å–∞–¥–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      data: {
        userId: parseInt(userId),
        clothingId: parseInt(clothingId),
        fit_rating: rating,
        updated_at: new Date().toISOString(),
      },
    });
  }
);
